<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Data Journey</title>
  
  <subtitle>Statistic / Cloud / Data Engineering / Coffee</subtitle>
  <link href="https://jellalyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://jellalyu.github.io/"/>
  <updated>2021-03-11T09:45:05.839Z</updated>
  <id>https://jellalyu.github.io/</id>
  
  <author>
    <name>JellalYu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Predictive Maintenance</title>
    <link href="https://jellalyu.github.io/2021/03/11/Predictive-Maintenance/"/>
    <id>https://jellalyu.github.io/2021/03/11/Predictive-Maintenance/</id>
    <published>2021-03-11T09:42:14.000Z</published>
    <updated>2021-03-11T09:45:05.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>維護方式簡介</strong></p><p>預測性維護用一句話貫穿就是「把搶修變成維護」。</p><p>常見的維護種類有反應性維護（Reactive Maintenance, RM），預防性維護（ Preventive Maintenance, PM）與預測性維護（ Predictive Maintenance, PdM）。</p><p>第一種 RM 是損壞時才修復，這種根本稱不上是維護了，而且當損壞發生的時候成本最高，例如機器停止時的生產時間成本。第二種 PM 就是不管設備是不是有問題，都例行性保養維護，這種的成本主要就是維修成本，錢不能花在刀口上。而最後一種預測性維護則可以將維護與損壞成本的期望值最小化，只在有潛在損壞可能的時候進行維護。成本如下圖：</p><p><img src="https://i.imgur.com/fGnMkie.png"></p><p>PdM 帶來的好處：</p><ul><li>減少設備維護時間</li><li>最大限度地減少因維護而浪費的生產時間</li><li>最大限度地減少備件和用品的成本</li></ul><p><strong>常見的 ML 預測方法與數據</strong></p><p>做預測性維護有很多種方法，例如：</p><ul><li>預測剩餘使用壽命（Regression models to predict <strong>remaining useful lifetime</strong>）</li><li>預測一定區間下的機器「狀態類別」 (Classification models to predict failure within a given time window)</li></ul><p>第一種方法要求在生產端有一定的設備損壞數據，才能知道還能存活多久，這意味著企業要先「繳學費」才能有這樣的經驗學習，因此如果機台本身有多段的狀態數據，在不正常時就先去搶修，對於企業而言會是比較好的選擇。</p><p>而數據收集建議透過 IoT 即時且持續蒐集數據，分析的數據可以從例如振動分析（vibration analysis），油分析（oil analysi），熱成像（thermal imaging）和設備觀察（equipment observation）這些來源獲得。</p><p>案例的部分可見這一篇：<a href="http://ilms.ouk.edu.tw/d9534524/doc/43787">http://ilms.ouk.edu.tw/d9534524/doc/43787</a></p><p><strong>Reference</strong></p><p><a href="https://towardsdatascience.com/how-to-implement-machine-learning-for-predictive-maintenance-4633cdbe4860">https://towardsdatascience.com/how-to-implement-machine-learning-for-predictive-maintenance-4633cdbe4860</a></p><p><a href="https://ivctechnologies.com/2017/08/29/reactive-preventive-predictive-maintenance/">https://ivctechnologies.com/2017/08/29/reactive-preventive-predictive-maintenance/</a></p><p><strong>NASA 資料集</strong></p><p><a href="https://www.kaggle.com/c/prehackathonsup/data">https://www.kaggle.com/c/prehackathonsup/data</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;維護方式簡介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;預測性維護用一句話貫穿就是「把搶修變成維護」。&lt;/p&gt;
&lt;p&gt;常見的維護種類有反應性維護（Reactive Maintenance, RM），預防性維護（ Preventive Maintenance, PM）與</summary>
      
    
    
    
    
    <category term="PdM" scheme="https://jellalyu.github.io/tags/PdM/"/>
    
  </entry>
  
  <entry>
    <title>Kubeflow Pipeline - 不只是 ML Pipeline</title>
    <link href="https://jellalyu.github.io/2020/11/11/post-kubeflow/"/>
    <id>https://jellalyu.github.io/2020/11/11/post-kubeflow/</id>
    <published>2020-11-11T05:44:24.000Z</published>
    <updated>2021-03-02T18:52:47.410Z</updated>
    
    <content type="html"><![CDATA[<p>這篇我原先打在 notion，由於圖片沒辦法直接匯出，請到下面連結見此文章：<br><a href="https://www.notion.so/Kubeflow-Pipeline-ML-Pipeline-310315e8e5cd4105b938daf4f41c5ce3">https://www.notion.so/Kubeflow-Pipeline-ML-Pipeline-310315e8e5cd4105b938daf4f41c5ce3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這篇我原先打在 notion，由於圖片沒辦法直接匯出，請到下面連結見此文章：&lt;br&gt;&lt;a href=&quot;https://www.notion.so/Kubeflow-Pipeline-ML-Pipeline-310315e8e5cd4105b938daf4f41c5ce3&quot;&gt;</summary>
      
    
    
    
    <category term="ML" scheme="https://jellalyu.github.io/categories/ML/"/>
    
    <category term="AWS" scheme="https://jellalyu.github.io/categories/ML/AWS/"/>
    
    
    <category term="DL" scheme="https://jellalyu.github.io/tags/DL/"/>
    
    <category term="k8s" scheme="https://jellalyu.github.io/tags/k8s/"/>
    
    <category term="Kubeflow" scheme="https://jellalyu.github.io/tags/Kubeflow/"/>
    
  </entry>
  
  <entry>
    <title>Should we consider Multicollinearity in ML/DL?</title>
    <link href="https://jellalyu.github.io/2020/11/11/post/"/>
    <id>https://jellalyu.github.io/2020/11/11/post/</id>
    <published>2020-11-11T05:44:24.000Z</published>
    <updated>2021-03-11T09:18:38.075Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PW8ycIO.png"></p><ul><li><p><strong>What is Multicollinearity?</strong></p><p>  在進行 Linear Regression Analysis 時，容易出現自變數（解釋變數）之間彼此相關的現象，我們稱這種現象為多重共線性。</p><p>  適度的多重共線性不成問題，但當出現嚴重共線性問題時，會導致分析結果不穩定，出現迴歸係數的符號與實際情況完全相反的情況。原本應該顯著的自變量變成不顯著，不顯著的自變量卻呈現出顯著性，這種情況下就需要消除多重共線性的影響。</p></li><li><p><strong>Detecting Multicollinearity with VIF</strong><br>  在建立統計模型時，我們通常可以用變異數膨脹因子 (Variance Inflation Factors, VIF) 去檢定是否存在 Multicollinearity 現象，如果這個值大於 10 就表示這個變數有共線性問題，應該要剔除。</p></li><li><p><strong>Fixing Multicollinearity</strong><br>  處理 Multicollinearity 有很多種方法，例如 Regression 可以加上 Penalty 參數，去懲罰出不重要的變數，藉此篩選出重要的變數，Lasso 或是 Ridge 方法都可以。除此之外，也可以考慮其他變數篩選方式，例如 Spike-and-Slab Regression，我先前試過這種變數篩選方式是可以很好解決這類問題。詳細介紹可以參考：<a href="https://en.wikipedia.org/wiki/Spike-and-slab_regression">https://en.wikipedia.org/wiki/Spike-and-slab_regression</a></p></li><li><p><strong>Should we consider Multicollinearity in ML/DL?</strong></p><p>  Desision Tree 本質上不受多重共線性的影響。如果有 2 個 99％ 相關的 factor，在決定分枝時決策樹只會選擇其中之一。而其他模型（例如 logistic regression）會同時考慮這兩個變數，那就很不妙。而 Boosted Tree 使用單獨的決策樹，所以也不會受到多重共線性的影響。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PW8ycIO.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is Multicollinearity?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  在進行 Linear Regression An</summary>
      
    
    
    
    <category term="ML" scheme="https://jellalyu.github.io/categories/ML/"/>
    
    
    <category term="DL" scheme="https://jellalyu.github.io/tags/DL/"/>
    
    <category term="Multicollinearity" scheme="https://jellalyu.github.io/tags/Multicollinearity/"/>
    
    <category term="Feature Engineering" scheme="https://jellalyu.github.io/tags/Feature-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>The Windowing Approach of Streaming Data</title>
    <link href="https://jellalyu.github.io/2020/10/05/text2.0/"/>
    <id>https://jellalyu.github.io/2020/10/05/text2.0/</id>
    <published>2020-10-05T09:27:31.000Z</published>
    <updated>2021-03-11T09:20:37.031Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PiOgRcI.png"></p><p>在 Streaming data 的處理上，因為數據是連續不斷的，我們不可能等到所有數據都到了才開始處理，我們可以每來一個消息就處理一次，像是一些聚合 (aggregation) 的處理。舉個例子：在過去的 1 分鐘內有多少用戶點擊了我們的網頁。在這種情況下，我們必須定義一個窗格 (window)，用來收集最近一分鐘內的數據，並對這個窗格內的數據進行計算。</p><p>窗格可以是時間驅動的 (Time Window，例如：每30秒鐘一個窗格)，也可以是數據驅動的 (Count Window，例如：每一百個事件一個窗格)。這些窗格分類普遍可以分成：Tumbling Window (無重疊)，Sliding Window (有重疊)，和Session Window (有間隙)。</p><p>下面這張表格定義 Data windowing: Chopping data along temporal boundaries into finite blocks for processing. (將數據沿時間邊界切割成有限塊以進行處理，英文很難懂，也說得很籠統)</p><p>下面用例子來解釋幾種 windowing 方法，假設不同時間點有不同數量的 Stream data。</p><p>Fixed (Tumbling): 用固定的時間邊界 (temporal boundaries)，把這些 Stream data 切成好幾塊 Block。如上圖藍色線部分。<br>Sliding: 滑動時間範圍，Block 和事件有固定的 length 和 period，且每個時間範圍都至少會有一個事件，如果 period (temporal boundaries) &lt; length (window size)，window 就會重疊 (overlap)，如上圖上面那一條綠線；如果 period = length 就會和 Fixed 一樣。<br>Session: 會將相近時間的 stream data 分組，並把沒有任何數據的時間範圍篩掉，如上圖橘色線部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PiOgRcI.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Streaming data 的處理上，因為數據是連續不斷的，我們不可能等到所有數據都到了才開始處理，我們可以每來一個消息就處理一次，像是一些聚合 (aggregati</summary>
      
    
    
    
    <category term="Data Engineering" scheme="https://jellalyu.github.io/categories/Data-Engineering/"/>
    
    
    <category term="Big Data" scheme="https://jellalyu.github.io/tags/Big-Data/"/>
    
    <category term="Time series" scheme="https://jellalyu.github.io/tags/Time-series/"/>
    
    <category term="Streaming Data" scheme="https://jellalyu.github.io/tags/Streaming-Data/"/>
    
  </entry>
  
</feed>
